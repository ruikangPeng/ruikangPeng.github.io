<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AFLNET调研文档</title>
    <link href="/2022/11/23/AFLNET%E8%B0%83%E7%A0%94%E6%96%87%E6%A1%A3/"/>
    <url>/2022/11/23/AFLNET%E8%B0%83%E7%A0%94%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666179895607-8d78bd7f-3a0b-4882-a2ae-d8314a5394f3.png#averageHue=%23f9f6f4&clientId=u131251a1-f49e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=ue9b5ad25&margin=%5Bobject%20Object%5D&name=ef308f7a7d32402a591279dc6446294.png&originHeight=141&originWidth=729&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30850&status=error&style=stroke&taskId=ude97f607-cf40-48b5-b435-744becbbb3c&title=" alt="ef308f7a7d32402a591279dc6446294.png"></p><ul><li>本文是2020年发表在ICST（C类会议）上的一篇文章。</li></ul><p><a href="https://dblp.org/pid/140/7942.html">Van-Thuan Pham</a>, <a href="https://dblp.org/pid/91/7541.html">Marcel Böhme</a>, <a href="https://dblp.org/pid/04/5884.html">Abhik Roychoudhury</a>:<br /><strong>AFLNET: A Greybox Fuzzer for Network Protocols.</strong> <a href="https://dblp.org/db/conf/icst/icst2020.html#PhamBR20">ICST2020</a>: 460-465</p><ul><li>注意本文第二作者是<a href="https://github.com/aflgo/aflgo">AFLGO</a>的第一作者。<a href="https://mboehme.github.io/paper/CCS17.pdf">《 Directed Greybox Fuzzing  》</a></li><li><a href="https://mboehme.github.io/paper/ICST20.AFLNet.pdf">论文链接</a></li><li><a href="https://github.com/aflnet/aflnet.git">工具链接</a></li><li>AFLNET：一种针对网络协议的<a href="https://baike.baidu.com/item/%E7%81%B0%E7%9B%92%E6%B5%8B%E8%AF%95/1906276">灰盒模糊测试</a>工具。（所谓灰盒模糊测试，通俗来说它是介于黑盒白盒两者之间的一种测试，在运行时把内部的逻辑看做黑盒，但是还是了解内部各个功能模块之间是如何协作的，又掺杂白盒的一些味道。）</li><li>本文作者：（仅介绍一作）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666180735678-dbd6817c-6066-4cdf-a457-f7948aa4fa29.png#averageHue=%23e9e8e7&clientId=u131251a1-f49e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u06060cf3&margin=%5Bobject%20Object%5D&name=3ac0fc848e121d394b99ac58cb5926e.png&originHeight=513&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127666&status=error&style=stroke&taskId=ub8925bc6-3bd0-474c-90ee-daec8407784&title=" alt="3ac0fc848e121d394b99ac58cb5926e.png"><br />他的其他paper：</p><table><thead><tr><th>year</th><th>belong</th><th>title</th><th>tool</th></tr></thead><tbody><tr><td>2019</td><td>TSE（A类期刊）</td><td><a href="https://mboehme.github.io/paper/CCS16.pdf">Coverage-Based Greybox Fuzzing as Markov Chain</a></td><td><a href="https://github.com/mboehme/aflfast">aflfast</a></td></tr><tr><td>2021</td><td>TSE（A类期刊）</td><td><a href="https://arxiv.org/pdf/1811.09447.pdf">Smart Greybox Fuzzing</a></td><td><a href="https://github.com/aflsmart/aflsmart">aflsmart</a></td></tr><tr><td>2022</td><td>SANER（B类会议）</td><td><a href="https://www.semanticscholar.org/reader/62e760fddfd3ef8ddcb4fc8d765b309e994d793a">State Selection Algorithms and Their Impact on The Performance of Stateful Network Protocol Fuzzing</a></td><td><a href="https://github.com/Alan32Liu/AFLNet_Legion/tree/e504ef4b6eb3328292c9a86556be1916b25cdfa0">AFLNet_Legion</a></td></tr><tr><td>只列举了几个，更多可以看<a href="https://ieeexplore.ieee.org/author/37085556168">https://ieeexplore.ieee.org/author/37085556168</a>。这个老师的研究动态可以关注。</td><td></td><td></td><td></td></tr></tbody></table><p><a name="U1vw1"></a></p><h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p><a name="KsYFB"></a></p><h2 id="当前工具测试协议面临的几个问题："><a href="#当前工具测试协议面临的几个问题：" class="headerlink" title="当前工具测试协议面临的几个问题："></a>当前工具测试协议面临的几个问题：</h2><p><strong>（1）CGF（基于覆盖的灰盒模糊测试：coverage-based Grey fuzzing）的问题：</strong></p><ul><li><strong>当前用于测试协议的工具没有针对某个特定协议</strong></li></ul><p>（这个看起来不像是问题，当前工具具有普适性不应该是更好的吗，但是我认为，在协议这块开发测试工具还是针对特定的协议会更好一点。因为我们的目的不单单是为了编写一个可以适用于测试大多数的协议的工具，更多的是为了找到协议的问题。在“普适好用”和“找到问题”的平衡上，我更倾向于后者。论文中只是简单一句话带过，没有解释，但是这个确实也算是一个CGF的问题。）<br />当前工具主要设计用于测试无状态程序（例如使用经典的CGF工具AFL来测试文件处理程序）。服务器是有状态和消息驱动的。客户端向服务器发送请求，服务器处理请求并发出响应。而服务器给客户端的响应信息取决于由早期消息控制的自身内部状态和当前客户端发送的消息。但是，当前的模糊器并不知道服务器状态信息，（如服务器处于忙碌状态，客户端还是会给服务器请求，这种请求是肯定不会得到服务器的响应的，但是客户端还是会request），当然现有的工具似乎也不需要知道发送给服务器消息的结构或顺序是什么。</p><ul><li><strong>无法测试几个程序状态之间的交互&#x2F;转换</strong>。</li></ul><p>当前方法是针对被测服务器（SUT：server under test）的特定程序状态进行单元测试或者将消息序列连接到文件中并使用它们作为种子执行正常的fuzz。</p><ul><li><strong>将多个消息连在一起（消息序列）的文件进行变异会导致执行效率低</strong>。</li></ul><p>在一个由消息m1<del>mn连接而成的文件 f 中，当前的CGF会对 f 进行突变，对m1</del>mn都一视同仁。如果中间某个消息 mi 很有价值（会导致更高的覆盖率或引发新的bug），应该更加注重对这个 mi 的变异，但是当前CGF还是会将没有价值的消息突变，（这么做是因为当前CGF对于文件 f 中的所有消息都一视同仁，可以理解为当前CGF变异m1~mn优先级都是一致的），因此这样的变异产生了许多无效的消息序列，最终导致执行效率低。<br /><strong>（2）SBF（有状态黑盒模糊测试：stateful blackbox fuzzing）的问题</strong></p><ul><li><strong>有效性依赖于给定状态模型和数据模型的完整性</strong></li></ul><p>SBF以有限状态机或者图的形式遍历给定协议模型，利用在状态处接受的消息的数据语法来生成在语法上有效的消息序列，然后再对SUT进行压力测试。（依赖完整性的原因）</p><ul><li><strong>协议状态机不能学习新状态</strong></li></ul><p>SBF没有保留有价值的测试用例用于进一步的模糊化，这些有价值的用例可以探索到状态机上所没有定义的状态。（不能反馈然后更新状态模型的原因）<br><a name="c6yyf"></a></p><h1 id="二、对FTP（文件传输协议）的前置说明"><a href="#二、对FTP（文件传输协议）的前置说明" class="headerlink" title="二、对FTP（文件传输协议）的前置说明"></a>二、对FTP（文件传输协议）的前置说明</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21563507/1668668275977-810c79e8-4ba5-4d66-8c46-475e6810a212.jpeg"><br />服务器（Server）是一个远程可以访问的软件系统。<br />客户端（Client）是使用服务器提供的服务的软件系统。<br />在本文的实验中，AFLNET充当客户端，LightFTP是服务器。两者通过FTP实现交互。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666606488940-c8548579-441b-4315-874a-ceb2e167732f.png#averageHue=%23f3f3f3&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u8fb89fb6&margin=%5Bobject%20Object%5D&name=1666606309655-dfae1d69-e3b6-4e5e-a9e0-1a576681b583.png&originHeight=335&originWidth=485&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48344&status=error&style=stroke&taskId=u143277d0-6b93-42d9-97df-7c2ebce9365&title=" alt="1666606309655-dfae1d69-e3b6-4e5e-a9e0-1a576681b583.png"><br />上图是客户端（红色字体）和服务器（黑色字体）之间消息交互过程。<br />FTP规定：客户端必须首先在服务器上进行身份验证才能发出其他命令。<br />在上图中，FTP服务器都会用包含状态码的响应消息对来自客户机的请求信息进行应答，响应中的状态码会通知客户机，这样客户机就会知道服务器在收到自己的请求消息后的当前状态是什么。</p><hr><p><a name="MTi41"></a></p><h1 id="三、AFLNET的实现"><a href="#三、AFLNET的实现" class="headerlink" title="三、AFLNET的实现"></a>三、AFLNET的实现</h1><ul><li>AFLNET是AFL的拓展。</li><li>下图是AFLNET的架构图。</li><li>首先，AFLNET与服务器之间启用了通过套接字的通信。（<strong>套接字</strong>：IP+端口号称为一个套接字。具体说来，两台主机之间通信其实就是两台主机的进程间进行通信，首先主机与主机之间通过IP相互找到，然后再通过端口号识别对应通信的进程。）</li><li>AFLNET支持两个通道：一个用于给服务器发送消息，一个用于接收服务器响应。</li><li>此外，论文中的实验还在请求之间添加了延迟，防止消息错乱。（客户端发送的m1没有收到响应，如果此时再发送m2，则服务器会丢弃m2）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666665855467-548dd1ef-298f-44ae-98a3-fbb34e4dff9f.png#averageHue=%23edeceb&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=ue1e5d498&margin=%5Bobject%20Object%5D&name=c85f5a2c1201e03a3af12a69323bed3.png&originHeight=297&originWidth=1021&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56753&status=error&style=stroke&taskId=uc743b280-52ed-43cd-a051-13d48059941&title=" alt="c85f5a2c1201e03a3af12a69323bed3.png"><br />AFLNET包含五大组件，如上图高亮显示。首先最初的输入是pcap文件。其<a href="https://www.cnblogs.com/codemariosec/p/16262934.html">格式</a>如图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666668392074-a4948fab-deb2-4aad-be57-97dab5eed5d2.png#averageHue=%23eaeaea&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u17857107&margin=%5Bobject%20Object%5D&name=%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%9E%84%E6%88%90.png&originHeight=720&originWidth=1432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132325&status=error&style=stroke&taskId=ufc88f84d-3572-479c-afb4-a758ee4c35d&title=" alt="文件格式构成.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666669154066-b5c7d560-be02-4fe2-a352-6de6ea8436d4.png#averageHue=%23d7b991&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u778878df&margin=%5Bobject%20Object%5D&name=%E6%97%A0%E6%A0%87%E9%A2%98.png&originHeight=356&originWidth=703&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43649&status=error&style=stroke&taskId=u8ec3ce88-88dc-4e03-8414-81406e8cdc2&title=" alt="无标题.png"><br />上图是pcap文件打开后的样子，其中红色框表示的是Pcap Header的部分，蓝色框表示的是Packet Header部分，绿色框表示的是Packet Data部分。绿色框后面接的是下一个数据包的头…<br />最初始阶段的pcap文件是利用抓包工具（tcpdump、wireshark等)抓取网络流量获得的。<br><a name="yEvrX"></a></p><h2 id="1、AFLNET的五大组件详解"><a href="#1、AFLNET的五大组件详解" class="headerlink" title="1、AFLNET的五大组件详解"></a>1、AFLNET的五大组件详解</h2><p><a name="eWXsF"></a></p><h3 id="（1）Request-Sequences-Parser（请求序列解析器）"><a href="#（1）Request-Sequences-Parser（请求序列解析器）" class="headerlink" title="（1）Request Sequences Parser（请求序列解析器）"></a>（1）Request Sequences Parser（请求序列解析器）</h3><p>功能：生成消息序列的初始语料库。<br />具体实现：将pcap文件中的响应消息过滤掉，只留下请求消息（即到达某个状态的请求路径）。然后将其解析，确定该请求消息的开始和结束。例如图一中是以331状态开始，以221状态结束。<br />对上述“解析”的进一步解释：我们通过过滤得到了一个请求消息序列（如下图USER foo—&gt;QUIT），我们确定该请求消息的开始和结束是需要前置工作的。这个前置工作就是将这个请求消息序列放入被测服务器执行一系列请求，然后将请求获得的响应码加上前驱响应码与该请求消息关联。这样在执行对消息序列解析时就会知道它的开始和结束。(如下图解析消息USER foo 时就会判定它是消息序列的开始，解析消息QUIT就会判定它是消息序列的结束)<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666670797936-2953950e-d2f1-4ef1-b9d2-8bae3a6bff86.png#averageHue=%23eadecf&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u575a733e&margin=%5Bobject%20Object%5D&name=1666670629440.png&originHeight=102&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17534&status=error&style=stroke&taskId=ud0977318-70b7-484d-b2da-88e40a12519&title=" alt="1666670629440.png"><br><a name="TyywO"></a></p><h3 id="（2）State-Machine-Learning（状态机学习）"><a href="#（2）State-Machine-Learning（状态机学习）" class="headerlink" title="（2）State Machine Learning（状态机学习）"></a>（2）State Machine Learning（状态机学习）</h3><p>功能：接受服务器响应，并将新观察到的状态增加到已实现的协议状态机（IPSM：Implemented Protocol State Machine，它是从前置工作中生成的）中。<br />具体实现：AFLNET将服务器的响应信息读入字节缓冲区，提取协议中指定的状态码，并确定状态转换过程。如果服务器响应中有新的状态代码，则添加表示新状态的新图节点。<br><a name="bReIf"></a></p><h3 id="（3）Target-State-Selector（目标状态选择器）"><a href="#（3）Target-State-Selector（目标状态选择器）" class="headerlink" title="（3）Target State Selector（目标状态选择器）"></a>（3）Target State Selector（目标状态选择器）</h3><p>功能：从ISPM中获取信息，选择AFLNET接下来应该关注的状态。<br />（在选择ISPM中间的状态之前，应该执行足够多的测试用例，也就是尽可能多的在SUT上执行请求消息序列，这样IPSM会尽可能的包含多的状态节点）<br />具体实现：启发式方法选择接下来应该关注的状态。具体来说是选择很少执行的状态，将很少执行的状态的优先级提升。<br><a name="Spm3z"></a></p><h3 id="（4）Sequence-Selector（序列选择器）"><a href="#（4）Sequence-Selector（序列选择器）" class="headerlink" title="（4）Sequence Selector（序列选择器）"></a>（4）Sequence Selector（序列选择器）</h3><p>功能：根据目标状态选择器选择的状态，从种子语料库中选择种子。（notes：这里的种子语料库具体实现为队列条目的链表，队列中的每个节点就是一串消息序列（可以理解为java里面的一个对象））<br />对下图的说明：下图包含两个部分。一是种子池（也可以叫消息池），池中包含多个种子队列（某种意义上说有多少状态就有），每个种子队列中的结点都是一串请求消息序列，每个队列中的每个结点（消息序列）都有一个共性就是都能到达某一指定状态。二是由AFLNET维护的状态语料库，它又包含两个部分，一个是State List，表中每个元素是相关状态信息的数据结构，可以说这个状态列表囊括所有已出现的状态信息；二是Hashmap，它将状态标识符映射到该状态标识符相对应状态的种子队列。<br />由此序列选择器的具体实现是：根据选定的状态从State List中查找是否有该状态，然后根据Hashmap的映射关系选择种子队列，然后从队列中选择消息序列。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666702513643-4b2cca3a-31c7-4ab3-9413-7f1779bd7120.png#averageHue=%23f2f2f2&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u7103fe15&margin=%5Bobject%20Object%5D&name=%E6%97%A0%E6%A0%87%E9%A2%98.png&originHeight=1564&originWidth=1720&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97516&status=done&style=stroke&taskId=u1a6e296e-919b-4d77-9627-bca20452983&title=" alt="无标题.png"><br><a name="xp4Zr"></a></p><h3 id="（5）Sequence-Mutators（序列变异器）"><a href="#（5）Sequence-Mutators（序列变异器）" class="headerlink" title="（5）Sequence Mutators（序列变异器）"></a>（5）Sequence Mutators（序列变异器）</h3><p>功能：变异生成新的消息序列。<br />具体实现：对AFL的fuzz_one方法进行了增强。AFLNET将选出来能够到达选定状态的消息序列M分割成三个部分：前缀M1、候选子序列M2、后缀M3。即M&#x3D;{M1,M2,M3}，变异时M1、M3保持不变，只变异M2部分。其目的是保证能够变异后的消息序列还能够到达指定状态。而对M2的变异操作AFLNET支持消息的替换、插入、复制、删除，同样也支持CGF中的字节级变异如位翻转、替换、插入或删除字节块。<br />如果变异后的消息序列观察到新状态（ISPM中没有的），或者涵盖了新的服务器源代码的位置，则会将它加入到消息池。<br><a name="z8Ci7"></a></p><h2 id="2、AFLNET各个组件协同工作过程"><a href="#2、AFLNET各个组件协同工作过程" class="headerlink" title="2、AFLNET各个组件协同工作过程"></a>2、AFLNET各个组件协同工作过程</h2><p>AFLNET是客户机，LightFTP是服务器。<br /><strong>假定目前我们只有一个pcap文件</strong>，这个文件包含的内容就是List 1上的消息序列。<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21563507/1669018347120-84f41a6c-8b2d-4364-ba7e-3e863d002d8e.jpeg"><br />假定我们选择331状态作为测试的目标状态。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21563507/1666710056795-b15bf685-346e-4e48-b5cd-b5f3c34a293c.png#averageHue=%23f5f5f5&clientId=u257e1f81-7f38-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u7dd03faf&margin=%5Bobject%20Object%5D&name=1666708845929-85b1b06b-d3df-40b3-a400-66c083b8aa83.png&originHeight=899&originWidth=1188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126336&status=done&style=stroke&taskId=u11ba0074-4cf2-4b26-a2e3-4287c52d38d&title=" alt="1666708845929-85b1b06b-d3df-40b3-a400-66c083b8aa83.png"></p><p><a name="jVMMn"></a></p><h1 id="四、作者进行的实验"><a href="#四、作者进行的实验" class="headerlink" title="四、作者进行的实验"></a>四、作者进行的实验</h1><ul><li>作者将<a href="https://github.com/aflnet/aflnet.git">AFLNET</a>和另外两个基线方法（CGF选择<a href="https://github.com/thuanpv/aflnwe.git">AFLNWE</a>、SBF选择<a href="https://github.com/IncludeSecurity/RTSPhuzz.git">BOOFUZZ</a>）进行对比。</li><li>实验所针对的协议是FTP协议（server选用<a href="https://github.com/hfiref0x/LightFTP.git">LightFTP</a>）和RTSP协议（server选用<a href="https://github.com/hfiref0x/LightFTP.git">Live555</a>）。对两个协议分别进行24小时的fuzzing，每个方法都各自运行了20个独立实例实验。然后比较二者的代码分支覆盖率、状态覆盖率、暴露bug的数量。</li></ul><p>（<strong>实验复现待补充</strong>）<br><a name="V7XbU"></a></p><h1 id="五、相关工作"><a href="#五、相关工作" class="headerlink" title="五、相关工作"></a>五、相关工作</h1><p>论文中作者写了三方面的相关工作，写的篇幅很短。<br><a name="MLyLo"></a></p><h3 id="A-覆盖率引导的灰盒模糊测试"><a href="#A-覆盖率引导的灰盒模糊测试" class="headerlink" title="A.覆盖率引导的灰盒模糊测试"></a>A.覆盖率引导的灰盒模糊测试</h3><p>这个部分作者主要讲的是在灰盒模糊测试中可以去做的几个方向。</p><ul><li>①对优质的种子进行变异，以实现种子引导作用。</li><li>②从输入的结构上可以进行改变。这个主要适用于有状态程序。如协议。<br><a name="wG9He"></a></li></ul><h3 id="B-网络模糊测试"><a href="#B-网络模糊测试" class="headerlink" title="B.网络模糊测试"></a>B.网络模糊测试</h3><p>这个部分对网络模糊测试进行了介绍。（列举了有学术界的：sulley、SPIKE和工业界的：Peach、Boofuzz、beSTORM）</p><ul><li>大多数网络模糊器是采用黑盒模糊测试的方法（根据手动构造的协议规范生成新的消息序列）</li><li>部分的网络模糊器也采用基于生成的方法（使用预先指定的消息模板生成新的消息序列）</li><li>SCGF采用基于突变的方法，通过对现有的消息序列进行突变来生成新的消息序列。</li></ul><p><a name="kEzJL"></a></p><h1 id="六、未来工作"><a href="#六、未来工作" class="headerlink" title="六、未来工作"></a>六、未来工作</h1><ol><li>实验拓展到其他流行的、关键的协议（如SSH）和简单邮件传输协议（如SMTP），来评估AFLNET。</li><li>增强状态机学习模块算法，增强扩展性，使他能够支持不产生响应代码的协议。</li></ol>]]></content>
    
    
    <categories>
      
      <category>文献阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BuleTooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
